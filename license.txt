                socket.onmessage = (event) => {
                    let { data, sourceDocument, conversationId } = JSON.parse(event.data);

                    // Locate the response element for the conversation
                    const responseElement = document.getElementById(`res-${QuestionCount}-${conversationId}`);

                    // Remove loader if it exists
                    const loaderElement = responseElement.querySelector(".loader");
                    if (loaderElement) {
                        loaderElement.remove(); // Removes the loader directly
                    }

                    // Process received data
                    if (data && data !== "##END_CONVERSATION##") {
                        responseElement.innerHTML += linkReplacer(data); // Append processed data with links replaced
                    }

                    // Handle the end of the conversation
                    if (data === "##END_CONVERSATION##") {
                        let question = document.getElementById(`question-${QuestionCount}-${conversationId}`).innerText;

                        // Add feedback buttons
                        const feedbackDiv = document.createElement("div");
                        feedbackDiv.className = "feedback-buttons";
                        feedbackDiv.innerHTML = `
                            <i class="fas fa-thumbs-up like_button" data-response="${data}" data-conversationId="${conversationId}" data-question="${question}"></i>
                            <i class="fas fa-thumbs-down dislike_button" data-conversationId="${conversationId}" data-response="${data}" data-question="${question}"></i>
                            <i class="fas fa-file-alt show_source_button" data-response="${data}" data-question="${question}" data-source-documents='res-${QuestionCount}-${conversationId}'></i>
                        `;
                        responseElement.appendChild(feedbackDiv);

                        // Ensure all text links are converted to hyperlinks
                        responseElement.innerHTML = linkReplacer(responseElement.innerHTML);
                    }

                    // Store source documents if available
                    if (sourceDocument) {
                        if (!SOURCE_DOCS[`res-${QuestionCount}-${conversationId}`]) {
                            SOURCE_DOCS[`res-${QuestionCount}-${conversationId}`] = [];
                        }
                        SOURCE_DOCS[`res-${QuestionCount}-${conversationId}`].push(sourceDocument);
                    }
                };

                // Function to identify and replace plain text links with clickable hyperlinks
                function linkReplacer(text) {
                    const urlRegex = /(https?:\/\/[^\s]+)/g; // Matches http:// or https:// followed by non-whitespace characters
                    return text.replace(urlRegex, (url) => {
                        return `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`;
                    });
                }


The MIT License (MIT)

Copyright (c) 2014 - 2015, British Columbia Institute of Technology

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
